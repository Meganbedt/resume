/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ResumeChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createResume"
      | "endorseResume"
      | "endorseSection"
      | "endorsedBy"
      | "getEncryptedEndorsementCount"
      | "getResume"
      | "grantAccess"
      | "nextResumeId"
      | "protocolId"
      | "resumes"
      | "revokeAccess"
      | "sections"
      | "updateResume"
      | "upsertSection"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRevoked"
      | "Endorsed"
      | "ResumeCreated"
      | "ResumeUpdated"
      | "SectionUpserted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createResume",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "endorseResume",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endorseSection",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endorsedBy",
    values: [BigNumberish, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedEndorsementCount",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getResume",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextResumeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sections",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateResume",
    values: [BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "upsertSection",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createResume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endorseResume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endorseSection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endorsedBy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedEndorsementCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getResume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextResumeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resumes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sections", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateResume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upsertSection",
    data: BytesLike
  ): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [resumeId: BigNumberish, viewer: AddressLike];
  export type OutputTuple = [resumeId: bigint, viewer: string];
  export interface OutputObject {
    resumeId: bigint;
    viewer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [resumeId: BigNumberish, viewer: AddressLike];
  export type OutputTuple = [resumeId: bigint, viewer: string];
  export interface OutputObject {
    resumeId: bigint;
    viewer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndorsedEvent {
  export type InputTuple = [
    resumeId: BigNumberish,
    sectionHash: BytesLike,
    endorser: AddressLike
  ];
  export type OutputTuple = [
    resumeId: bigint,
    sectionHash: string,
    endorser: string
  ];
  export interface OutputObject {
    resumeId: bigint;
    sectionHash: string;
    endorser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResumeCreatedEvent {
  export type InputTuple = [
    resumeId: BigNumberish,
    owner: AddressLike,
    resumeHash: BytesLike,
    isPublic: boolean
  ];
  export type OutputTuple = [
    resumeId: bigint,
    owner: string,
    resumeHash: string,
    isPublic: boolean
  ];
  export interface OutputObject {
    resumeId: bigint;
    owner: string;
    resumeHash: string;
    isPublic: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResumeUpdatedEvent {
  export type InputTuple = [
    resumeId: BigNumberish,
    newHash: BytesLike,
    isPublic: boolean
  ];
  export type OutputTuple = [
    resumeId: bigint,
    newHash: string,
    isPublic: boolean
  ];
  export interface OutputObject {
    resumeId: bigint;
    newHash: string;
    isPublic: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SectionUpsertedEvent {
  export type InputTuple = [resumeId: BigNumberish, sectionHash: BytesLike];
  export type OutputTuple = [resumeId: bigint, sectionHash: string];
  export interface OutputObject {
    resumeId: bigint;
    sectionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ResumeChain extends BaseContract {
  connect(runner?: ContractRunner | null): ResumeChain;
  waitForDeployment(): Promise<this>;

  interface: ResumeChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createResume: TypedContractMethod<
    [resumeHash: BytesLike, isPublic: boolean],
    [bigint],
    "nonpayable"
  >;

  endorseResume: TypedContractMethod<
    [resumeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  endorseSection: TypedContractMethod<
    [resumeId: BigNumberish, sectionHash: BytesLike],
    [void],
    "nonpayable"
  >;

  endorsedBy: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: AddressLike],
    [boolean],
    "view"
  >;

  getEncryptedEndorsementCount: TypedContractMethod<
    [resumeId: BigNumberish, sectionHash: BytesLike],
    [string],
    "view"
  >;

  getResume: TypedContractMethod<
    [resumeId: BigNumberish],
    [
      [string, string, boolean, bigint, bigint, string] & {
        owner: string;
        resumeHash: string;
        isPublic: boolean;
        createdAt: bigint;
        updatedAt: bigint;
        callerAccess: string;
      }
    ],
    "view"
  >;

  grantAccess: TypedContractMethod<
    [resumeId: BigNumberish, viewer: AddressLike],
    [void],
    "nonpayable"
  >;

  nextResumeId: TypedContractMethod<[], [bigint], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  resumes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, bigint, bigint] & {
        owner: string;
        resumeHash: string;
        isPublic: boolean;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  revokeAccess: TypedContractMethod<
    [resumeId: BigNumberish, viewer: AddressLike],
    [void],
    "nonpayable"
  >;

  sections: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [[string, string] & { sectionHash: string; endorsementCount: string }],
    "view"
  >;

  updateResume: TypedContractMethod<
    [resumeId: BigNumberish, newHash: BytesLike, isPublic: boolean],
    [void],
    "nonpayable"
  >;

  upsertSection: TypedContractMethod<
    [resumeId: BigNumberish, sectionHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createResume"
  ): TypedContractMethod<
    [resumeHash: BytesLike, isPublic: boolean],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endorseResume"
  ): TypedContractMethod<[resumeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endorseSection"
  ): TypedContractMethod<
    [resumeId: BigNumberish, sectionHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endorsedBy"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedEndorsementCount"
  ): TypedContractMethod<
    [resumeId: BigNumberish, sectionHash: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getResume"
  ): TypedContractMethod<
    [resumeId: BigNumberish],
    [
      [string, string, boolean, bigint, bigint, string] & {
        owner: string;
        resumeHash: string;
        isPublic: boolean;
        createdAt: bigint;
        updatedAt: bigint;
        callerAccess: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<
    [resumeId: BigNumberish, viewer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextResumeId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resumes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, bigint, bigint] & {
        owner: string;
        resumeHash: string;
        isPublic: boolean;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<
    [resumeId: BigNumberish, viewer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sections"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [[string, string] & { sectionHash: string; endorsementCount: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateResume"
  ): TypedContractMethod<
    [resumeId: BigNumberish, newHash: BytesLike, isPublic: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upsertSection"
  ): TypedContractMethod<
    [resumeId: BigNumberish, sectionHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Endorsed"
  ): TypedContractEvent<
    EndorsedEvent.InputTuple,
    EndorsedEvent.OutputTuple,
    EndorsedEvent.OutputObject
  >;
  getEvent(
    key: "ResumeCreated"
  ): TypedContractEvent<
    ResumeCreatedEvent.InputTuple,
    ResumeCreatedEvent.OutputTuple,
    ResumeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ResumeUpdated"
  ): TypedContractEvent<
    ResumeUpdatedEvent.InputTuple,
    ResumeUpdatedEvent.OutputTuple,
    ResumeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SectionUpserted"
  ): TypedContractEvent<
    SectionUpsertedEvent.InputTuple,
    SectionUpsertedEvent.OutputTuple,
    SectionUpsertedEvent.OutputObject
  >;

  filters: {
    "AccessGranted(uint256,address)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRevoked(uint256,address)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "Endorsed(uint256,bytes32,address)": TypedContractEvent<
      EndorsedEvent.InputTuple,
      EndorsedEvent.OutputTuple,
      EndorsedEvent.OutputObject
    >;
    Endorsed: TypedContractEvent<
      EndorsedEvent.InputTuple,
      EndorsedEvent.OutputTuple,
      EndorsedEvent.OutputObject
    >;

    "ResumeCreated(uint256,address,bytes32,bool)": TypedContractEvent<
      ResumeCreatedEvent.InputTuple,
      ResumeCreatedEvent.OutputTuple,
      ResumeCreatedEvent.OutputObject
    >;
    ResumeCreated: TypedContractEvent<
      ResumeCreatedEvent.InputTuple,
      ResumeCreatedEvent.OutputTuple,
      ResumeCreatedEvent.OutputObject
    >;

    "ResumeUpdated(uint256,bytes32,bool)": TypedContractEvent<
      ResumeUpdatedEvent.InputTuple,
      ResumeUpdatedEvent.OutputTuple,
      ResumeUpdatedEvent.OutputObject
    >;
    ResumeUpdated: TypedContractEvent<
      ResumeUpdatedEvent.InputTuple,
      ResumeUpdatedEvent.OutputTuple,
      ResumeUpdatedEvent.OutputObject
    >;

    "SectionUpserted(uint256,bytes32)": TypedContractEvent<
      SectionUpsertedEvent.InputTuple,
      SectionUpsertedEvent.OutputTuple,
      SectionUpsertedEvent.OutputObject
    >;
    SectionUpserted: TypedContractEvent<
      SectionUpsertedEvent.InputTuple,
      SectionUpsertedEvent.OutputTuple,
      SectionUpsertedEvent.OutputObject
    >;
  };
}
